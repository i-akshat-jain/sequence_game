import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // Cleanup browser extensions before React loads
              (function() {
                'use strict';
                function cleanupExtensions() {
                  try {
                    const body = document.body;
                    if (!body) return;
                    
                    const attributesToRemove = [];
                    for (let i = 0; i < body.attributes.length; i++) {
                      const attr = body.attributes[i];
                      if (attr.name.includes('__processed_') ||
                          attr.name.includes('bis_') ||
                          attr.name.includes('extension') ||
                          attr.name.includes('ultimate-toolbar')) {
                        attributesToRemove.push(attr.name);
                      }
                    }
                    
                    attributesToRemove.forEach(attrName => {
                      body.removeAttribute(attrName);
                    });
                  } catch (e) {
                    // Ignore cleanup errors
                  }
                }
                
                // Run cleanup when DOM is ready
                if (document.readyState === 'loading') {
                  document.addEventListener('DOMContentLoaded', cleanupExtensions);
                } else {
                  cleanupExtensions();
                }
              })();
            `
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
